@startuml

interface Expression {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Variable implements Expression {
    -name: String
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

abstract class BinaryOperation implements Expression {
    -left: Expression
    -right: Expression
    +getRight(): Expression
    +getLeft(): Expression
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Addition extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Subtraction extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Multiplication extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Division extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Power extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Module extends UnaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

abstract class UnaryOperation implements Expression {
    -expression: Expression
    +getExpression(): Expression
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Sqrt extends UnaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Parenthesis extends UnaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
}

class Constant implements Expression {
    -value: Double
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    -isInteger(): boolean
}


@enduml
