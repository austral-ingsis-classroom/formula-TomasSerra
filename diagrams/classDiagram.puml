@startuml

interface Expression {
    +evaluate(): Double
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Variable extends Expression {
    -name: String
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

abstract class BinaryOperation extends Expression {
    -left: Expression
    -right: Expression
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Addition extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Subtraction extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Multiplication extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Division extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Power extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Module extends BinaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

abstract class UnaryOperation extends Expression {
    -operand: Expression
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Sqrt extends UnaryOperation {
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}

class Constant extends Expression {
    -value: Double
    +evaluate(values: Map<String, Double>): Double
    +toString(): String
    +getVariables(): Set<String>
}


@enduml
